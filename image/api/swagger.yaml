---
swagger: "2.0"
info:
  version: "v1"
  title: "imageapi"
host: "api.cloudmersive.com"
schemes:
- "https"
paths:
  /image/face/locate:
    post:
      tags:
      - "Face"
      summary: "Find faces in an image"
      description: "Locate the positions of all faces in an image"
      operationId: "Face_Locate"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "imageFile"
        in: "formData"
        description: "Image file to perform the operation on.  Common file formats\
          \ such as PNG, JPEG are supported."
        required: true
        type: "file"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/FaceLocateResponse"
      x-swagger-router-controller: "Face"
  /image/face/crop/first:
    post:
      tags:
      - "Face"
      summary: "Crop image to face (square)"
      description: "Crop an image to the face (rectangular crop).  If there is more\
        \ than one face present, choose the first one."
      operationId: "Face_CropFirst"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "imageFile"
        in: "formData"
        description: "Image file to perform the operation on.  Common file formats\
          \ such as PNG, JPEG are supported."
        required: true
        type: "file"
      responses:
        200:
          description: "OK"
          schema:
            type: "file"
      x-swagger-router-controller: "Face"
  /image/face/crop/first/round:
    post:
      tags:
      - "Face"
      summary: "Crop image to face (round)"
      description: "Crop an image to the face (circular/round crop).  If there is\
        \ more than one face present, choose the first one."
      operationId: "Face_CropFirstRound"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "imageFile"
        in: "formData"
        description: "Image file to perform the operation on.  Common file formats\
          \ such as PNG, JPEG are supported."
        required: true
        type: "file"
      responses:
        200:
          description: "OK"
          schema:
            type: "file"
      x-swagger-router-controller: "Face"
  /image/nsfw/classify:
    post:
      tags:
      - "Nsfw"
      summary: "NSFW image classifier"
      description: "Classify an image into Not Safe For Work (NSFW)/Porn/Racy content\
        \ and Safe Content."
      operationId: "Nsfw_Classify"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "imageFile"
        in: "formData"
        description: "Image file to perform the operation on.  Common file formats\
          \ such as PNG, JPEG are supported."
        required: true
        type: "file"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/NsfwResult"
      x-swagger-router-controller: "Nsfw"
  /image/recognize/describe:
    post:
      tags:
      - "Recognize"
      summary: "Describe an image in natural language"
      description: "Generate an English language text description of the image as\
        \ a sentence."
      operationId: "Recognize_Describe"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "imageFile"
        in: "formData"
        description: "Image file to perform the operation on.  Common file formats\
          \ such as PNG, JPEG are supported."
        required: true
        type: "file"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ImageDescriptionResponse"
      x-swagger-router-controller: "Recognize"
  /image/resize/preserveAspectRatio/{maxWidth}/{maxHeight}:
    post:
      tags:
      - "Resize"
      summary: "Resize an image with parameters"
      description: "Resize an image to a maximum width and maximum height, while preserving\
        \ the image's original aspect ratio"
      operationId: "Resize_Post"
      consumes:
      - "multipart/form-data"
      produces:
      - "image/png"
      parameters:
      - name: "maxWidth"
        in: "path"
        description: "Maximum width of the output image - final image will be as large\
          \ as possible while less than or equial to this width"
        required: true
        type: "integer"
        format: "int32"
      - name: "maxHeight"
        in: "path"
        description: "Maximum height of the output image - final image will be as\
          \ large as possible while less than or equial to this height"
        required: true
        type: "integer"
        format: "int32"
      - name: "imageFile"
        in: "formData"
        description: "Image file to perform the operation on.  Common file formats\
          \ such as PNG, JPEG are supported."
        required: true
        type: "file"
      responses:
        200:
          description: "OK"
          schema:
            type: "object"
            properties: {}
      x-swagger-router-controller: "Resize"
securityDefinitions:
  Apikey:
    description: "API Key Authentication"
    type: "apiKey"
    name: "Apikey"
    in: "header"
definitions:
  FaceLocateResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the operation was successful, false otherwise"
      Faces:
        type: "array"
        description: "Array of faces found in the image"
        items:
          $ref: "#/definitions/Face"
      FaceCount:
        type: "integer"
        format: "int32"
        description: "Number of faces found in the image"
    description: "Results of locating faces in an image"
    example:
      Successful: true
      FaceCount: 5
      Faces:
      - BottomY: 5
        TopY: 6
        RightX: 1
        LeftX: 0
      - BottomY: 5
        TopY: 6
        RightX: 1
        LeftX: 0
  Face:
    type: "object"
    properties:
      LeftX:
        type: "integer"
        format: "int32"
        description: "X coordinate of the left side of the face"
      TopY:
        type: "integer"
        format: "int32"
        description: "Y coordinate of the top side of the face"
      RightX:
        type: "integer"
        format: "int32"
        description: "X coordinate of the right side of the face"
      BottomY:
        type: "integer"
        format: "int32"
        description: "Y coordinate of the bottom side of the face"
    description: "Location of one face in an image"
    example:
      BottomY: 5
      TopY: 6
      RightX: 1
      LeftX: 0
  NsfwResult:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the classification was successfully run, false otherwise"
      Score:
        type: "number"
        format: "double"
        description: "Score between 0.0 and 1.0.  Scores of 0.0-0.2 represent high\
          \ probability safe content, while scores 0.8-1.0 represent high probability\
          \ unsafe content.  Content between 0.2 and 0.8 is of increasing raciness."
      ClassificationOutcome:
        type: "string"
        description: "Classification result into four categories: SafeContent_HighProbability,\
          \ UnsafeContent_HighProbability, RacyContent, SafeContent_ModerateProbability"
    description: "Result of an NSFW classification"
    example:
      Score: 0.80082819046101150206595775671303272247314453125
      ClassificationOutcome: "ClassificationOutcome"
      Successful: true
  ImageDescriptionResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "Was the image processed successfully?"
      Highconfidence:
        type: "boolean"
        description: "Is the resulting best outcome recognition a high confidence\
          \ outcome?"
      BestOutcome:
        description: "The best Machine Learning outcome"
        $ref: "#/definitions/RecognitionOutcome"
      RunnerUpOutcome:
        description: "Best backup (\"runner up\") Machine Learning outcome"
        $ref: "#/definitions/RecognitionOutcome"
    description: "Result of recognizing an image"
    example:
      RunnerUpOutcome:
        Description: "Description"
        ConfidenceScore: 0.80082819046101150206595775671303272247314453125
      Highconfidence: true
      BestOutcome:
        Description: "Description"
        ConfidenceScore: 0.80082819046101150206595775671303272247314453125
      Successful: true
  RecognitionOutcome:
    type: "object"
    properties:
      ConfidenceScore:
        type: "number"
        format: "double"
        description: "Scores closer to 1 are better than scores closer to 0"
      Description:
        type: "string"
        description: "English language description of the image"
    description: "Specific recognition outcome"
    example:
      Description: "Description"
      ConfidenceScore: 0.80082819046101150206595775671303272247314453125

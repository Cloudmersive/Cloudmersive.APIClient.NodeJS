---
swagger: "2.0"
info:
  version: "v1"
  title: "nlpapi"
host: "api.cloudmersive.com"
schemes:
- "https"
paths:
  /nlp/apikeyUsage/{id}:
    get:
      tags:
      - "ApikeyUsage"
      summary: "Get API Key usage"
      description: "Use this API to determine how many API calls you have made during\
        \ this month."
      operationId: "ApikeyUsage_Get"
      consumes: []
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - name: "id"
        in: "path"
        description: "API key to check"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "integer"
            format: "int64"
      x-swagger-router-controller: "ApikeyUsage"
  /nlp/ExtractEntitiesString:
    post:
      tags:
      - "ExtractEntitiesString"
      summary: "Extract entities from string"
      description: "Extract the named entitites from an input string."
      operationId: "ExtractEntitiesString_Post"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "value"
        description: "Input string"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      x-swagger-router-controller: "ExtractEntitiesString"
  /nlp/language/detect:
    post:
      tags:
      - "LanguageDetection"
      summary: "Detect language of text"
      description: "Automatically determine which language a text string is written\
        \ in.  Supports Danish (DAN), German (DEU), English (ENG), French (FRA), Italian\
        \ (ITA), Japanese (JPN), Korean (KOR), Dutch (NLD), Norwegian (NOR), Portuguese\
        \ (POR), Russian (RUS), Spanish (SPA), Swedish (SWE), Chinese (ZHO)."
      operationId: "LanguageDetection_Post"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "textToDetect"
        description: "Text to detect language of"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/LanguageDetectionResponse"
      x-swagger-router-controller: "LanguageDetection"
  /nlp/ParseString:
    post:
      tags:
      - "ParseString"
      summary: "Parse string to syntax tree"
      description: "Parses the input string into a Penn Treebank syntax tree"
      operationId: "ParseString_Post"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Input string"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      x-swagger-router-controller: "ParseString"
  /nlp/PosTaggerJson:
    post:
      tags:
      - "PosTaggerJson"
      summary: "Part-of-speech tag a string"
      description: "Part-of-speech (POS) tag a string and return result as JSON"
      operationId: "PosTaggerJson_Post"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "request"
        description: "Input string"
        required: true
        schema:
          $ref: "#/definitions/PosRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PosResponse"
      x-swagger-router-controller: "PosTaggerJson"
  /nlp/PosTaggerString:
    post:
      tags:
      - "PosTaggerString"
      summary: "Part-of-speech tag a string"
      description: "Perform a part-of-speech (POS) tagging on the input string."
      operationId: "PosTaggerString_Post"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Input string"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      x-swagger-router-controller: "PosTaggerString"
  /nlp/get/sentences/string:
    post:
      tags:
      - "Sentences"
      summary: "Extract sentences from string"
      description: "Segment an input string into separate sentences, output result\
        \ as a string."
      operationId: "Sentences_Post"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Input string"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      x-swagger-router-controller: "Sentences"
  /nlp/spellcheck/check/word/string:
    post:
      tags:
      - "SpellCheck"
      summary: "Spell check a word"
      description: "Check if a word is spelled correctly"
      operationId: "SpellCheck_Post"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "value"
        description: "Input string word"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "boolean"
      x-swagger-router-controller: "SpellCheck"
  /nlp/spellcheck/check/sentence/string:
    post:
      tags:
      - "SpellCheck"
      summary: "Spell check a sentence"
      description: "Check if a sentence is spelled correctly"
      operationId: "SpellCheck_CheckSentenceString"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "value"
        description: "Input sentence word"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "boolean"
      x-swagger-router-controller: "SpellCheck"
  /nlp/spellcheck/check/sentence/json:
    post:
      tags:
      - "SpellCheck"
      summary: "Check if sentence is spelled correctly"
      description: "Checks whether the sentence is spelled correctly and returns the\
        \ result as JSON"
      operationId: "SpellCheck_CheckSentenceJson"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "value"
        description: "Input sentence"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CheckSentenceJsonResponse"
      x-swagger-router-controller: "SpellCheck"
  /nlp/spellcheck/check/word/json:
    post:
      tags:
      - "SpellCheck"
      summary: "Spell check word"
      description: "Spell check a word as JSON"
      operationId: "SpellCheck_CheckJson"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "value"
        description: "Input sentence"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CheckJsonResponse"
      x-swagger-router-controller: "SpellCheck"
  /nlp/spellcheck/correct/word/string:
    post:
      tags:
      - "SpellCheck"
      summary: "Find spelling corrections"
      description: "Find the spelling corrections for a word"
      operationId: "SpellCheck_Correct"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "value"
        description: "Input word"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      x-swagger-router-controller: "SpellCheck"
  /nlp/spellcheck/correct/word/json:
    post:
      tags:
      - "SpellCheck"
      summary: "Find spelling corrections"
      description: "Find spelling correction suggestions and return result as JSON"
      operationId: "SpellCheck_CorrectJson"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "value"
        description: "Input string"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CorrectJsonResponse"
      x-swagger-router-controller: "SpellCheck"
  /nlp/get/words/string:
    post:
      tags:
      - "Words"
      summary: "Get words from string"
      description: "Segment an input string into its component words"
      operationId: "Words_GetWordsString"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Input string"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      x-swagger-router-controller: "Words"
  /nlp/get/words/json:
    post:
      tags:
      - "Words"
      summary: "Get words in input string (JSON)"
      description: "Get the component words in an input string, formatted as JSON"
      operationId: "Words_GetWordsJson"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "String to process"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/GetWordsJsonResponse"
      x-swagger-router-controller: "Words"
  /nlp/get/words/verbs/string:
    post:
      tags:
      - "Words"
      summary: "Get the verbs in a string"
      description: "Get all of the verbs in the input string."
      operationId: "Words_Post"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Input string"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      x-swagger-router-controller: "Words"
  /nlp/get/words/properNouns/string:
    post:
      tags:
      - "Words"
      summary: "Get proper nouns in a string"
      description: "Returns all of the proper nouns in a string.  Proper nouns are\
        \ named entities such as \"Hilton\"."
      operationId: "Words_ProperNouns"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Input string"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      x-swagger-router-controller: "Words"
  /nlp/get/words/nouns/string:
    post:
      tags:
      - "Words"
      summary: "Get nouns in string"
      description: "Returns all of the nouns in the input string"
      operationId: "Words_Nouns"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Input string"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      x-swagger-router-controller: "Words"
  /nlp/get/words/adverbs/string:
    post:
      tags:
      - "Words"
      summary: "Get adverbs in input string"
      description: "Returns all adverb words in the input string"
      operationId: "Words_Adverbs"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Input string"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      x-swagger-router-controller: "Words"
  /nlp/get/words/pronouns/string:
    post:
      tags:
      - "Words"
      summary: "Returns all pronounts in string"
      description: "Returns all pronouns in the input string"
      operationId: "Words_Pronouns"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Input string"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      x-swagger-router-controller: "Words"
  /nlp/get/words/adjectives/string:
    post:
      tags:
      - "Words"
      summary: "Get adjectives in string"
      description: "Retrieves all adjectives in input string"
      operationId: "Words_Adjectives"
      consumes:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "text/json"
      - "application/xml"
      - "text/xml"
      parameters:
      - in: "body"
        name: "input"
        description: "Input string"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
      x-swagger-router-controller: "Words"
securityDefinitions:
  Apikey:
    description: "API Key Authentication"
    type: "apiKey"
    name: "Apikey"
    in: "header"
definitions:
  LanguageDetectionResponse:
    type: "object"
    properties:
      Successful:
        type: "boolean"
        description: "True if the language detection operation was successful, false\
          \ otherwise"
      DetectedLanguage_ThreeLetterCode:
        type: "string"
        description: "ISO 639 three letter language code"
      DetectedLanguage_FullName:
        type: "string"
        description: "The full name (in English) of the detected language"
    description: "Output of a language detection operation"
    example:
      DetectedLanguage_FullName: "DetectedLanguage_FullName"
      Successful: true
      DetectedLanguage_ThreeLetterCode: "DetectedLanguage_ThreeLetterCode"
  PosRequest:
    type: "object"
    properties:
      InputText:
        type: "string"
        description: "Input text string"
    description: "Part of speech tagging request"
    example:
      InputText: "InputText"
  PosResponse:
    type: "object"
    properties:
      TaggedSentences:
        type: "array"
        description: "Sentences in the string"
        items:
          $ref: "#/definitions/PosSentence"
    description: "Part of speech tag result"
    example:
      TaggedSentences:
      - Words:
        - Word: "{}"
          Tag: "{}"
        - Word: "{}"
          Tag: "{}"
      - Words:
        - Word: "{}"
          Tag: "{}"
        - Word: "{}"
          Tag: "{}"
  PosSentence:
    type: "object"
    properties:
      Words:
        type: "array"
        description: "Words in the sentence"
        items:
          $ref: "#/definitions/PosTaggedWord"
    description: "Sentence in a POS tag result"
    example:
      Words:
      - Word: "{}"
        Tag: "{}"
      - Word: "{}"
        Tag: "{}"
  PosTaggedWord:
    type: "object"
    properties:
      Word:
        type: "object"
        description: "Word that was tagged"
        properties: {}
      Tag:
        type: "object"
        description: "Penn Treebank tag applied to the word"
        properties: {}
    description: "Word tagged in a POS tag"
    example:
      Word: "{}"
      Tag: "{}"
  CheckSentenceJsonResponse:
    type: "object"
    properties:
      IncorrectCount:
        type: "integer"
        format: "int32"
        description: "Number of incorrect words"
      Words:
        type: "array"
        description: "Words in the sentence, both correct and incorrect"
        items:
          $ref: "#/definitions/CorrectWordInSentenceJsonResponse"
    description: "Result of spell checking a sentence"
    example:
      IncorrectCount: 0
      Words:
      - Suggestions:
        - "Suggestions"
        - "Suggestions"
        Word:
          Word: "Word"
          StartPosition: 1
          WordIndex: 6
          EndPosition: 5
        Correct: true
      - Suggestions:
        - "Suggestions"
        - "Suggestions"
        Word:
          Word: "Word"
          StartPosition: 1
          WordIndex: 6
          EndPosition: 5
        Correct: true
  CorrectWordInSentenceJsonResponse:
    type: "object"
    properties:
      Word:
        description: "Position of the word"
        $ref: "#/definitions/WordPosition"
      Correct:
        type: "boolean"
        description: "True if the word is spelled correctly, false otherwise"
      Suggestions:
        type: "array"
        description: "Suggested spelling improvements"
        items:
          type: "string"
    description: "A word in a sentence"
    example:
      Suggestions:
      - "Suggestions"
      - "Suggestions"
      Word:
        Word: "Word"
        StartPosition: 1
        WordIndex: 6
        EndPosition: 5
      Correct: true
  WordPosition:
    type: "object"
    properties:
      Word:
        type: "string"
        description: "Word as a string"
      WordIndex:
        type: "integer"
        format: "int32"
        description: "Zero-based index of the word; first word has index 0, second\
          \ word has index 1 and so on"
      StartPosition:
        type: "integer"
        format: "int32"
        description: "Zero-based character offset at which the word begins in the\
          \ input string"
      EndPosition:
        type: "integer"
        format: "int32"
        description: "Zero-based character offset at which the word ends in the input\
          \ string"
    example:
      Word: "Word"
      StartPosition: 1
      WordIndex: 6
      EndPosition: 5
  CheckJsonResponse:
    type: "object"
    properties:
      Correct:
        type: "boolean"
        description: "True if spellected correctly, false otherwise"
    description: "Spell check result"
    example:
      Correct: true
  CorrectJsonResponse:
    type: "object"
    properties:
      Correct:
        type: "boolean"
        description: "True if the word is spelled correctly, false otherwise"
      Suggestions:
        type: "array"
        description: "Suggested spelling corrections"
        items:
          type: "string"
    description: "Spelling correction check result"
    example:
      Suggestions:
      - "Suggestions"
      - "Suggestions"
      Correct: true
  GetWordsJsonResponse:
    type: "object"
    properties:
      Words:
        type: "array"
        description: "Array of words"
        items:
          $ref: "#/definitions/WordPosition"
    description: "Words in input string"
    example:
      Words:
      - Word: "Word"
        StartPosition: 1
        WordIndex: 6
        EndPosition: 5
      - Word: "Word"
        StartPosition: 1
        WordIndex: 6
        EndPosition: 5
